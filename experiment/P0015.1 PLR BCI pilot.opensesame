# Generated by OpenSesame 2.8.3~pre1 (Gutsy Gibson)
# Tue Jul  1 16:45:01 2014 (posix)
# <http://www.cogsci.nl/opensesame>

set mouse_backend "psycho"
set subject_parity "even"
set height "768"
set font_family "mono"
set font_italic "no"
set synth_backend "legacy"
set title "P0015.1 PLR BCI Pilot"
set coordinates "relative"
set start "experiment"
set sampler_backend "legacy"
set transparent_variables "no"
set foreground "white"
set font_bold "no"
set description "Default description"
set background "gray"
set font_size "18"
set keyboard_backend "psycho"
set canvas_backend "psycho"
set compensation "0"
set bidi "no"
set subject_nr "0"
set width "1024"

define inline_script classes
	set _run ""
	___prepare__
	import numpy as np
	from psychopy.visual import RadialStim, TextStim, GratingStim
	from itertools import permutations
	from scipy.stats import linregress
	
	class Background(object):
		
		def __init__(self, N=4, size=512):
				
			nShades = 1
			while True:
				shades = np.linspace(-1, 1, nShades)
				l = list(permutations(shades))
				if len(l) >= N:
					break
				nShades += 1			
			self.tex = np.rot90(np.array(l[:N]))				
			print(u'Using %s' % self.tex)
			self.size = size
			self.step = 0
			self.N = N
			self.stim = RadialStim(win, angularCycles=1, radialCycles=0, size=size)
			self.fixDot = GratingStim(win, tex=None, mask='circle', color='green',
				size=8)
			
		def cycleLen(self):
		
			return self.tex.shape[0]
			
		def setTex(self):
			
			print(u'Showing step %d' % self.step)
			self.currentTex = self.tex[self.step % self.cycleLen()]
			self.currentTex.shape = 1, len(self.currentTex)
			self.stim.tex = self.currentTex
			self.step += 1
					
		def show(self):
			
			self.stim.draw()
			self.fixDot.draw()
	
	class Target(object):
		
		def __init__(self, background, letter, pos, opacity=.5, color='green',
			size=128):
			
			self.background = background		
			self.letter = letter
			self.opacity = .5
			self.color = color
			self.size = size
			self.pos = pos
			r = self.background.size/4
			a = np.pi/4 - np.radians((360 / self.background.N) * self.pos)
			x = r * np.cos(a)
			y = r * np.sin(a)
			self.xy = x,y
			self.stim = TextStim(win, letter, pos=self.xy, opacity=self.opacity,
				color=self.color, height=size)
			self.lPrediction = []
			self.lPupilSize = []
			
		def analyze(self):
			
			aPupilSize = np.array(self.lPupilSize)
			aPrediction = np.array(self.lPrediction)
			
			s, i, r, p, se = linregress(aPupilSize, aPrediction)
			return r
	
				
		def prediction(self):
			
			return self.background.currentTex[0, self.pos]
			
		def setPupilSize(self, pupilSize):
			
			self.lPrediction.append(self.prediction())
			self.lPupilSize.append(pupilSize)
			
		def show(self):
		
			self.stim.draw()
	__end__
	set description "Executes Python code"

define sequence experiment
	run eyelink_calibrate "always"
	run classes "always"
	run loop "always"

define eyelink_calibrate eyelink_calibrate
	set sacc_vel_thresh "35"
	set cal_beep "yes"
	set description "Calibration/ initialization plugin for the Eyelink series of eye trackers (SR-Research)"
	set sacc_acc_thresh "9500"
	set cal_target_size "16"
	set force_drift_correct "yes"
	set tracker_attached "No (dummy mode)"

define eyelink_drift_correct eyelink_drift_correct
	set xpos "0"
	set description "Drift correction plugin for the Eyelink series of eye trackers (SR-Research)"
	set ypos "0"
	set mode "Automatic (fixation triggered)"

define eyelink_start_recording eyelink_start_recording

define eyelink_stop_recording eyelink_stop_recording

define feedback feedback
	set duration "keypress"
	set reset_variables "yes"
	set description "Provides feedback to the participant"
	draw textline 0 -32 "You selected [winnerId]" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0 32 "(r = [winnerR])" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"
	draw textline 0.0 320.0 "Press any key to continue" center=1 color=white font_family="mono" font_size=18 font_italic=no font_bold=no show_if="always" html="yes"

define inline_script inline_script
	___run__
	background = Background()
	frameDur = 2000
	
	i = 0
	targets = []
	for letter in ['A', 'B', 'C', 'D']:
		target = Target(background, letter, pos=i)
		i += 1
		targets.append(target)
	
	for i in range(background.cycleLen()):	
		background.setTex()
		background.show()	
		for target in targets:
			target.show()
		win.flip()
		t = self.time()
		while self.time() - t < frameDur:
			pupilSize = exp.eyelink.pupil_size()
			for target in targets:
				target.setPupilSize(pupilSize)		
	
	winnerR = -1
	for target in targets:
		r = target.analyze()
		print '%s: r = %.2f' % (target.letter, r)
		if r >= winnerR:
			winnerR = r
			winnerId = target.letter
		
	exp.set('winnerId', winnerId)
	exp.set('winnerR', winnerR)
	__end__
	set _prepare ""
	set description "Executes Python code"

define loop loop
	set repeat "10"
	set description "Repeatedly runs another item"
	set item "sequence"
	set break_if "never"
	set column_order ""
	set cycles "1"
	set order "random"
	run sequence

define sequence sequence
	run eyelink_drift_correct "always"
	run eyelink_start_recording "always"
	run inline_script "always"
	run eyelink_stop_recording "always"
	run feedback "always"

